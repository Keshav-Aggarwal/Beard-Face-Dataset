# -*- coding: utf-8 -*-
"""Copy of Hello, Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xbc8V5oRZepPqzhBvomwYublAnV8fwNT
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import glob
# %matplotlib.pyplot inline

x = tf.placeholder(tf.float32, [None, None, None, 4])
y = tf.placeholder(tf.float32, [None, None, None, 4])

def deConv_model(last_conv, conv3, conv2):
  weights_initializer_stddev = 0.01
  weights_regularized_l2 = 1e-3
  t_conv1 = tf.layers.conv2d_transpose(last_conv, 128, 1, # kernel_size
                                     padding = 'SAME',
                                     kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                                     kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                                     name='t_conv1')
  t_conv2 = tf.layers.conv2d_transpose(t_conv1, 64, 3, # kernel_size
                                     padding = 'SAME',strides= (2, 2),
                                     kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                                     kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                                     name='t_conv2')
  t_conv3 = tf.layers.conv2d_transpose(t_conv2, 32, 3, # kernel_size
                                     padding = 'SAME',strides= (2, 2),
                                     kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                                     kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                                     name='t_conv3')
  t_conv4 = tf.layers.conv2d_transpose(t_conv3, 16, 3, # kernel_size
                                     padding = 'SAME',strides= (2, 2),
                                     kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                                     kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                                     name='t_conv4')
  t_conv5 = tf.layers.conv2d_transpose(t_conv4, 4, 3, # kernel_size
                                     padding = 'SAME',strides= (2, 2),
                                     kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                                     kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                                     name='t_conv5')
  return t_conv5, t_conv4, t_conv3, t_conv2

def model(inp):
  weights_initializer_stddev = 0.01
  weights_regularized_l2 = 1e-3
  conv1 = tf.layers.conv2d(inp, 3, 5, 1, padding='VALID', activation=tf.nn.relu,
                           kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                           kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                           name="Conv_1")
  # 144*196
  conv2 = tf.layers.conv2d(conv1, 16, 5, 1,padding='SAME', activation=tf.nn.relu,
                           kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                           kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                           name="Conv_2")
  covn2 = tf.layers.max_pooling2d(conv2, 2, 2)
  
  # 77*98
  
  conv3 = tf.layers.conv2d(covn2, 32, 3, 1,padding='VALID', activation=tf.nn.relu,
                           kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                           kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                           name="Conv_3")
  covn3 = tf.layers.max_pooling2d(conv3, 2, 2)
  
  # 37*48
  conv4 = tf.layers.conv2d(covn3, 64, 5, 1,padding='SAME', activation=tf.nn.relu,
                           kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                           kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                           name="Conv_4")
  covn4= tf.layers.max_pooling2d(conv4, 2, 2)
  conv4 = tf.layers.conv2d(conv4, 128, 5, 1,padding='SAME', activation=tf.nn.relu,
                           kernel_initializer = tf.random_normal_initializer(stddev=weights_initializer_stddev),
                           kernel_regularizer= tf.contrib.layers.l2_regularizer(weights_regularized_l2),
                           name="Conv_5")
  return conv4, conv3, conv2

# !wget -O master.zip https://github.com/Keshav-Aggarwal/Beard-Face-Dataset/raw/master/Beard%20Dataset.zip
# !unzip master.zip
!ls -ltr

beard = glob.glob('beard/*.jpg')
nobeard = glob.glob('no_beard/*.jpg')
imgs_beard = []
imgs_no_beard = []

for path_b, path_n in zip(beard, nobeard):
  imgs_beard.append(plt.imread(path_b))
  imgs_no_beard.append(plt.imread(path_n))
  
model_str, conv3, conv2 = model(x)
dconv = deConv_model(model_str, conv3, conv2)

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  last_conv = sess.run(model_str, feed_dict={x:imgs_beard})
  t_conv5, t_conv4, t_conv3, t_conv2 = sess.run(dconv, feed_dict={x:imgs_beard})
  
  print(t_conv5.shape)
  print(t_conv4.shape)
  print(t_conv3.shape)
  print(t_conv2.shape)
  print(last_conv.shape)

